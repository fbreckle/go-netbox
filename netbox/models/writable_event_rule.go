// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WritableEventRule Adds support for custom fields and tags.
//
// swagger:model WritableEventRule
type WritableEventRule struct {

	// action object id
	// Minimum: 0
	ActionObjectID *int64 `json:"action_object_id"`

	// action object type
	// Required: true
	ActionObjectType *string `json:"action_object_type"`

	// * `webhook` - Webhook
	// * `script` - Script
	// Enum: ["webhook","script"]
	ActionType string `json:"action_type,omitempty"`

	// Conditions
	//
	// A set of conditions which determine whether the event will be generated.
	Conditions interface{} `json:"conditions,omitempty"`

	// content types
	ContentTypes []string `json:"content_types,omitempty"`

	// Custom fields
	CustomFields interface{} `json:"custom_fields,omitempty"`

	// description
	// Max Length: 200
	Description string `json:"description,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// The types of event which will trigger this rule.
	EventTypes []string `json:"event_types"`

	// name
	// Required: true
	// Max Length: 150
	// Min Length: 1
	Name *string `json:"name"`

	// object types
	ObjectTypes []string `json:"object_types,omitempty"`

	// tags
	Tags []*NestedTag `json:"tags"`
}

// Validate validates this writable event rule
func (m *WritableEventRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionObjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionObjectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WritableEventRule) validateActionObjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ActionObjectID) { // not required
		return nil
	}

	if err := validate.MinimumInt("action_object_id", "body", *m.ActionObjectID, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *WritableEventRule) validateActionObjectType(formats strfmt.Registry) error {

	if err := validate.Required("action_object_type", "body", m.ActionObjectType); err != nil {
		return err
	}

	return nil
}

var writableEventRuleTypeActionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["webhook","script"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		writableEventRuleTypeActionTypePropEnum = append(writableEventRuleTypeActionTypePropEnum, v)
	}
}

const (

	// WritableEventRuleActionTypeWebhook captures enum value "webhook"
	WritableEventRuleActionTypeWebhook string = "webhook"

	// WritableEventRuleActionTypeScript captures enum value "script"
	WritableEventRuleActionTypeScript string = "script"
)

// prop value enum
func (m *WritableEventRule) validateActionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, writableEventRuleTypeActionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WritableEventRule) validateActionType(formats strfmt.Registry) error {
	if swag.IsZero(m.ActionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionTypeEnum("action_type", "body", m.ActionType); err != nil {
		return err
	}

	return nil
}

func (m *WritableEventRule) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 200); err != nil {
		return err
	}

	return nil
}

var writableEventRuleEventTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["object_created","object_updated","object_deleted","job_started","job_completed","job_failed","job_errored"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		writableEventRuleEventTypesItemsEnum = append(writableEventRuleEventTypesItemsEnum, v)
	}
}

func (m *WritableEventRule) validateEventTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, writableEventRuleEventTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WritableEventRule) validateEventTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.EventTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.EventTypes); i++ {

		// value enum
		if err := m.validateEventTypesItemsEnum("event_types"+"."+strconv.Itoa(i), "body", m.EventTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *WritableEventRule) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 150); err != nil {
		return err
	}

	return nil
}

func (m *WritableEventRule) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this writable event rule based on the context it is used
func (m *WritableEventRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WritableEventRule) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {

			if swag.IsZero(m.Tags[i]) { // not required
				return nil
			}

			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WritableEventRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WritableEventRule) UnmarshalBinary(b []byte) error {
	var res WritableEventRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
