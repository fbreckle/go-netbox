// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomFieldChoiceSet custom field choice set
//
// swagger:model CustomFieldChoiceSet
type CustomFieldChoiceSet struct {

	// base choices
	BaseChoices *CustomFieldChoiceSetBaseChoices `json:"base_choices,omitempty"`

	// Choices count
	// Read Only: true
	ChoicesCount int64 `json:"choices_count,omitempty"`

	// Created
	// Read Only: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created,omitempty"`

	// Description
	// Max Length: 200
	Description string `json:"description,omitempty"`

	// Display
	// Read Only: true
	Display string `json:"display,omitempty"`

	// extra choices
	ExtraChoices [][]string `json:"extra_choices"`

	// ID
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Last updated
	// Read Only: true
	// Format: date-time
	LastUpdated *strfmt.DateTime `json:"last_updated,omitempty"`

	// Name
	//
	// Internal field name
	// Required: true
	// Max Length: 100
	// Min Length: 1
	// Pattern: ^[a-z0-9_]+$
	Name *string `json:"name"`

	// Order alphabetically
	//
	// Choices are automatically ordered alphabetically
	OrderAlphabetically bool `json:"order_alphabetically,omitempty"`

	// Url
	// Read Only: true
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`
}

// Validate validates this custom field choice set
func (m *CustomFieldChoiceSet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseChoices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtraChoices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomFieldChoiceSet) validateBaseChoices(formats strfmt.Registry) error {
	if swag.IsZero(m.BaseChoices) { // not required
		return nil
	}

	if m.BaseChoices != nil {
		if err := m.BaseChoices.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base_choices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("base_choices")
			}
			return err
		}
	}

	return nil
}

func (m *CustomFieldChoiceSet) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomFieldChoiceSet) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 200); err != nil {
		return err
	}

	return nil
}

func (m *CustomFieldChoiceSet) validateExtraChoices(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtraChoices) { // not required
		return nil
	}

	for i := 0; i < len(m.ExtraChoices); i++ {

		for ii := 0; ii < len(m.ExtraChoices[i]); ii++ {

			if err := validate.MaxLength("extra_choices"+"."+strconv.Itoa(i)+"."+strconv.Itoa(ii), "body", m.ExtraChoices[i][ii], 100); err != nil {
				return err
			}

		}

	}

	return nil
}

func (m *CustomFieldChoiceSet) validateLastUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomFieldChoiceSet) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 100); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", *m.Name, `^[a-z0-9_]+$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomFieldChoiceSet) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this custom field choice set based on the context it is used
func (m *CustomFieldChoiceSet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBaseChoices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChoicesCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisplay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomFieldChoiceSet) contextValidateBaseChoices(ctx context.Context, formats strfmt.Registry) error {

	if m.BaseChoices != nil {
		if err := m.BaseChoices.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base_choices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("base_choices")
			}
			return err
		}
	}

	return nil
}

func (m *CustomFieldChoiceSet) contextValidateChoicesCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "choices_count", "body", int64(m.ChoicesCount)); err != nil {
		return err
	}

	return nil
}

func (m *CustomFieldChoiceSet) contextValidateCreated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *CustomFieldChoiceSet) contextValidateDisplay(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "display", "body", string(m.Display)); err != nil {
		return err
	}

	return nil
}

func (m *CustomFieldChoiceSet) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *CustomFieldChoiceSet) contextValidateLastUpdated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "last_updated", "body", m.LastUpdated); err != nil {
		return err
	}

	return nil
}

func (m *CustomFieldChoiceSet) contextValidateURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "url", "body", strfmt.URI(m.URL)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomFieldChoiceSet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomFieldChoiceSet) UnmarshalBinary(b []byte) error {
	var res CustomFieldChoiceSet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomFieldChoiceSetBaseChoices Base choices
//
// swagger:model CustomFieldChoiceSetBaseChoices
type CustomFieldChoiceSetBaseChoices struct {

	// label
	// Enum: [IATA (Airport codes) ISO 3166 (Country codes) UN/LOCODE (Location codes)]
	Label string `json:"label,omitempty"`

	// * `IATA` - IATA (Airport codes) * `ISO_3166` - ISO 3166 (Country codes) * `UN_LOCODE` - UN/LOCODE (Location codes)
	// Enum: [IATA ISO_3166 UN_LOCODE]
	Value string `json:"value,omitempty"`
}

// Validate validates this custom field choice set base choices
func (m *CustomFieldChoiceSetBaseChoices) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var customFieldChoiceSetBaseChoicesTypeLabelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IATA (Airport codes)","ISO 3166 (Country codes)","UN/LOCODE (Location codes)"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customFieldChoiceSetBaseChoicesTypeLabelPropEnum = append(customFieldChoiceSetBaseChoicesTypeLabelPropEnum, v)
	}
}

const (

	// CustomFieldChoiceSetBaseChoicesLabelIATAAirportCodes captures enum value "IATA (Airport codes)"
	CustomFieldChoiceSetBaseChoicesLabelIATAAirportCodes string = "IATA (Airport codes)"

	// CustomFieldChoiceSetBaseChoicesLabelISO3166CountryCodes captures enum value "ISO 3166 (Country codes)"
	CustomFieldChoiceSetBaseChoicesLabelISO3166CountryCodes string = "ISO 3166 (Country codes)"

	// CustomFieldChoiceSetBaseChoicesLabelUNLOCODELocationCodes captures enum value "UN/LOCODE (Location codes)"
	CustomFieldChoiceSetBaseChoicesLabelUNLOCODELocationCodes string = "UN/LOCODE (Location codes)"
)

// prop value enum
func (m *CustomFieldChoiceSetBaseChoices) validateLabelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customFieldChoiceSetBaseChoicesTypeLabelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CustomFieldChoiceSetBaseChoices) validateLabel(formats strfmt.Registry) error {
	if swag.IsZero(m.Label) { // not required
		return nil
	}

	// value enum
	if err := m.validateLabelEnum("base_choices"+"."+"label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

var customFieldChoiceSetBaseChoicesTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IATA","ISO_3166","UN_LOCODE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customFieldChoiceSetBaseChoicesTypeValuePropEnum = append(customFieldChoiceSetBaseChoicesTypeValuePropEnum, v)
	}
}

const (

	// CustomFieldChoiceSetBaseChoicesValueIATA captures enum value "IATA"
	CustomFieldChoiceSetBaseChoicesValueIATA string = "IATA"

	// CustomFieldChoiceSetBaseChoicesValueISO3166 captures enum value "ISO_3166"
	CustomFieldChoiceSetBaseChoicesValueISO3166 string = "ISO_3166"

	// CustomFieldChoiceSetBaseChoicesValueUNLOCODE captures enum value "UN_LOCODE"
	CustomFieldChoiceSetBaseChoicesValueUNLOCODE string = "UN_LOCODE"
)

// prop value enum
func (m *CustomFieldChoiceSetBaseChoices) validateValueEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customFieldChoiceSetBaseChoicesTypeValuePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CustomFieldChoiceSetBaseChoices) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	// value enum
	if err := m.validateValueEnum("base_choices"+"."+"value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this custom field choice set base choices based on context it is used
func (m *CustomFieldChoiceSetBaseChoices) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomFieldChoiceSetBaseChoices) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomFieldChoiceSetBaseChoices) UnmarshalBinary(b []byte) error {
	var res CustomFieldChoiceSetBaseChoices
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
