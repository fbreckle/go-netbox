// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package dcim

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/fbreckle/go-netbox/netbox/models"
)

// DcimMacAddressesUpdateReader is a Reader for the DcimMacAddressesUpdate structure.
type DcimMacAddressesUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DcimMacAddressesUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDcimMacAddressesUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewDcimMacAddressesUpdateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDcimMacAddressesUpdateOK creates a DcimMacAddressesUpdateOK with default headers values
func NewDcimMacAddressesUpdateOK() *DcimMacAddressesUpdateOK {
	return &DcimMacAddressesUpdateOK{}
}

/*
DcimMacAddressesUpdateOK describes a response with status code 200, with default header values.

DcimMacAddressesUpdateOK dcim mac addresses update o k
*/
type DcimMacAddressesUpdateOK struct {
	Payload *models.MACAddress
}

// IsSuccess returns true when this dcim mac addresses update o k response has a 2xx status code
func (o *DcimMacAddressesUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this dcim mac addresses update o k response has a 3xx status code
func (o *DcimMacAddressesUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this dcim mac addresses update o k response has a 4xx status code
func (o *DcimMacAddressesUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this dcim mac addresses update o k response has a 5xx status code
func (o *DcimMacAddressesUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this dcim mac addresses update o k response a status code equal to that given
func (o *DcimMacAddressesUpdateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the dcim mac addresses update o k response
func (o *DcimMacAddressesUpdateOK) Code() int {
	return 200
}

func (o *DcimMacAddressesUpdateOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /dcim/mac-addresses/{id}/][%d] dcimMacAddressesUpdateOK %s", 200, payload)
}

func (o *DcimMacAddressesUpdateOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /dcim/mac-addresses/{id}/][%d] dcimMacAddressesUpdateOK %s", 200, payload)
}

func (o *DcimMacAddressesUpdateOK) GetPayload() *models.MACAddress {
	return o.Payload
}

func (o *DcimMacAddressesUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MACAddress)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDcimMacAddressesUpdateDefault creates a DcimMacAddressesUpdateDefault with default headers values
func NewDcimMacAddressesUpdateDefault(code int) *DcimMacAddressesUpdateDefault {
	return &DcimMacAddressesUpdateDefault{
		_statusCode: code,
	}
}

/*
DcimMacAddressesUpdateDefault describes a response with status code -1, with default header values.

DcimMacAddressesUpdateDefault dcim mac addresses update default
*/
type DcimMacAddressesUpdateDefault struct {
	_statusCode int

	Payload interface{}
}

// IsSuccess returns true when this dcim mac addresses update default response has a 2xx status code
func (o *DcimMacAddressesUpdateDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this dcim mac addresses update default response has a 3xx status code
func (o *DcimMacAddressesUpdateDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this dcim mac addresses update default response has a 4xx status code
func (o *DcimMacAddressesUpdateDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this dcim mac addresses update default response has a 5xx status code
func (o *DcimMacAddressesUpdateDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this dcim mac addresses update default response a status code equal to that given
func (o *DcimMacAddressesUpdateDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the dcim mac addresses update default response
func (o *DcimMacAddressesUpdateDefault) Code() int {
	return o._statusCode
}

func (o *DcimMacAddressesUpdateDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /dcim/mac-addresses/{id}/][%d] dcim_mac-addresses_update default %s", o._statusCode, payload)
}

func (o *DcimMacAddressesUpdateDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /dcim/mac-addresses/{id}/][%d] dcim_mac-addresses_update default %s", o._statusCode, payload)
}

func (o *DcimMacAddressesUpdateDefault) GetPayload() interface{} {
	return o.Payload
}

func (o *DcimMacAddressesUpdateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
