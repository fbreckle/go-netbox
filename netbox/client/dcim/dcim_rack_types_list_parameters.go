// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package dcim

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDcimRackTypesListParams creates a new DcimRackTypesListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDcimRackTypesListParams() *DcimRackTypesListParams {
	return &DcimRackTypesListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDcimRackTypesListParamsWithTimeout creates a new DcimRackTypesListParams object
// with the ability to set a timeout on a request.
func NewDcimRackTypesListParamsWithTimeout(timeout time.Duration) *DcimRackTypesListParams {
	return &DcimRackTypesListParams{
		timeout: timeout,
	}
}

// NewDcimRackTypesListParamsWithContext creates a new DcimRackTypesListParams object
// with the ability to set a context for a request.
func NewDcimRackTypesListParamsWithContext(ctx context.Context) *DcimRackTypesListParams {
	return &DcimRackTypesListParams{
		Context: ctx,
	}
}

// NewDcimRackTypesListParamsWithHTTPClient creates a new DcimRackTypesListParams object
// with the ability to set a custom HTTPClient for a request.
func NewDcimRackTypesListParamsWithHTTPClient(client *http.Client) *DcimRackTypesListParams {
	return &DcimRackTypesListParams{
		HTTPClient: client,
	}
}

/*
DcimRackTypesListParams contains all the parameters to send to the API endpoint

	for the dcim rack types list operation.

	Typically these are written to a http.Request.
*/
type DcimRackTypesListParams struct {

	/* ID.

	   List of unique integer values identifying rack types.
	*/
	ID []int32

	/* Limit.

	   Number of results to return per page.
	*/
	Limit *int64

	/* Q.

	   Search query string.
	*/
	Q *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the dcim rack types list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DcimRackTypesListParams) WithDefaults() *DcimRackTypesListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the dcim rack types list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DcimRackTypesListParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the dcim rack types list params
func (o *DcimRackTypesListParams) WithTimeout(timeout time.Duration) *DcimRackTypesListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the dcim rack types list params
func (o *DcimRackTypesListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the dcim rack types list params
func (o *DcimRackTypesListParams) WithContext(ctx context.Context) *DcimRackTypesListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the dcim rack types list params
func (o *DcimRackTypesListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the dcim rack types list params
func (o *DcimRackTypesListParams) WithHTTPClient(client *http.Client) *DcimRackTypesListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the dcim rack types list params
func (o *DcimRackTypesListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the dcim rack types list params
func (o *DcimRackTypesListParams) WithID(id []int32) *DcimRackTypesListParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the dcim rack types list params
func (o *DcimRackTypesListParams) SetID(id []int32) {
	o.ID = id
}

// WithLimit adds the limit to the dcim rack types list params
func (o *DcimRackTypesListParams) WithLimit(limit *int64) *DcimRackTypesListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the dcim rack types list params
func (o *DcimRackTypesListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithQ adds the q to the dcim rack types list params
func (o *DcimRackTypesListParams) WithQ(q *string) *DcimRackTypesListParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the dcim rack types list params
func (o *DcimRackTypesListParams) SetQ(q *string) {
	o.Q = q
}

// WriteToRequest writes these params to a swagger request
func (o *DcimRackTypesListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ID != nil {

		// binding items for id
		joinedID := o.bindParamID(reg)

		// query array param id
		if err := r.SetQueryParam("id", joinedID...); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamDcimRackTypesList binds the parameter id
func (o *DcimRackTypesListParams) bindParamID(formats strfmt.Registry) []string {
	iDIR := o.ID

	var iDIC []string
	for _, iDIIR := range iDIR { // explode []int32

		iDIIV := swag.FormatInt32(iDIIR) // int32 as string
		iDIC = append(iDIC, iDIIV)
	}

	// items.CollectionFormat: "multi"
	iDIS := swag.JoinByFormat(iDIC, "multi")

	return iDIS
}
