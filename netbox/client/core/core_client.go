// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new core API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for core API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CoreDataFilesList(params *CoreDataFilesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataFilesListOK, error)

	CoreDataFilesRead(params *CoreDataFilesReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataFilesReadOK, error)

	CoreDataSourcesCreate(params *CoreDataSourcesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesCreateCreated, error)

	CoreDataSourcesDelete(params *CoreDataSourcesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesDeleteNoContent, error)

	CoreDataSourcesList(params *CoreDataSourcesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesListOK, error)

	CoreDataSourcesPartialUpdate(params *CoreDataSourcesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesPartialUpdateOK, error)

	CoreDataSourcesRead(params *CoreDataSourcesReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesReadOK, error)

	CoreDataSourcesSync(params *CoreDataSourcesSyncParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesSyncCreated, error)

	CoreDataSourcesUpdate(params *CoreDataSourcesUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CoreDataFilesList core data files list API
*/
func (a *Client) CoreDataFilesList(params *CoreDataFilesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataFilesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreDataFilesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_data-files_list",
		Method:             "GET",
		PathPattern:        "/core/data-files/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreDataFilesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreDataFilesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CoreDataFilesListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CoreDataFilesRead core data files read API
*/
func (a *Client) CoreDataFilesRead(params *CoreDataFilesReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataFilesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreDataFilesReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_data-files_read",
		Method:             "GET",
		PathPattern:        "/core/data-files/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreDataFilesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreDataFilesReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CoreDataFilesReadDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CoreDataSourcesCreate core data sources create API
*/
func (a *Client) CoreDataSourcesCreate(params *CoreDataSourcesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreDataSourcesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_data-sources_create",
		Method:             "POST",
		PathPattern:        "/core/data-sources/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreDataSourcesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreDataSourcesCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CoreDataSourcesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CoreDataSourcesDelete core data sources delete API
*/
func (a *Client) CoreDataSourcesDelete(params *CoreDataSourcesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreDataSourcesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_data-sources_delete",
		Method:             "DELETE",
		PathPattern:        "/core/data-sources/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreDataSourcesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreDataSourcesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CoreDataSourcesDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CoreDataSourcesList core data sources list API
*/
func (a *Client) CoreDataSourcesList(params *CoreDataSourcesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreDataSourcesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_data-sources_list",
		Method:             "GET",
		PathPattern:        "/core/data-sources/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreDataSourcesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreDataSourcesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CoreDataSourcesListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CoreDataSourcesPartialUpdate core data sources partial update API
*/
func (a *Client) CoreDataSourcesPartialUpdate(params *CoreDataSourcesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreDataSourcesPartialUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_data-sources_partial_update",
		Method:             "PATCH",
		PathPattern:        "/core/data-sources/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreDataSourcesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreDataSourcesPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CoreDataSourcesPartialUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CoreDataSourcesRead core data sources read API
*/
func (a *Client) CoreDataSourcesRead(params *CoreDataSourcesReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreDataSourcesReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_data-sources_read",
		Method:             "GET",
		PathPattern:        "/core/data-sources/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreDataSourcesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreDataSourcesReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CoreDataSourcesReadDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CoreDataSourcesSync Enqueue a job to synchronize the DataSource.
*/
func (a *Client) CoreDataSourcesSync(params *CoreDataSourcesSyncParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesSyncCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreDataSourcesSyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_data-sources_sync",
		Method:             "POST",
		PathPattern:        "/core/data-sources/{id}/sync/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreDataSourcesSyncReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreDataSourcesSyncCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CoreDataSourcesSyncDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CoreDataSourcesUpdate core data sources update API
*/
func (a *Client) CoreDataSourcesUpdate(params *CoreDataSourcesUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CoreDataSourcesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCoreDataSourcesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "core_data-sources_update",
		Method:             "PUT",
		PathPattern:        "/core/data-sources/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CoreDataSourcesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CoreDataSourcesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CoreDataSourcesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
